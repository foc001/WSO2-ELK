version: '3.2'

services:
  elasticsearch:
    build:
      context: docker-elk-master/elasticsearch/
      args:
        ELK_VERSION: $ELK_VERSION
    volumes:
      - type: bind
        source: ./docker-elk-master/elasticsearch/config/elasticsearch.yml
        target: /usr/share/elasticsearch/config/elasticsearch.yml
        read_only: true
      - type: volume
        source: elasticsearch
        target: /usr/share/elasticsearch/data
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      ES_JAVA_OPTS: "-Xmx256m -Xms256m"
      ELASTIC_PASSWORD: changeme
      # Use single node discovery in order to disable production mode and avoid bootstrap checks.
      # see: https://www.elastic.co/guide/en/elasticsearch/reference/current/bootstrap-checks.html
      discovery.type: single-node
    networks:
      - elk

  logstash:
    build:
      context: docker-elk-master/logstash/
      args:
        ELK_VERSION: $ELK_VERSION
    volumes:
      - type: bind
        source: ./docker-elk-master/logstash/config/logstash.yml
        target: /usr/share/logstash/config/logstash.yml
        read_only: true
      - type: bind
        source: ./docker-elk-master/logstash/pipeline
        target: /usr/share/logstash/pipeline
        read_only: true
    ports:
      - "5044:5044"
      - "5000:5000/tcp"
      - "5000:5000/udp"
      - "9600:9600"
    environment:
      LS_JAVA_OPTS: "-Xmx256m -Xms256m"
    networks:
      - elk
    depends_on:
      - elasticsearch

  kibana:
    build:
      context: docker-elk-master/kibana/
      args:
        ELK_VERSION: $ELK_VERSION
    volumes:
      - type: bind
        source: ./docker-elk-master/kibana/config/kibana.yml
        target: /usr/share/kibana/config/kibana.yml
        read_only: true
    ports:
      - "5601:5601"
    networks:
      - elk
    depends_on:
      - elasticsearch
  wso2ei-mysql:
    image: mysql:5.7.20
    container_name: wso2ei-mysql
    hostname: wso2ei-mysql
    ports:
      - 3306
    environment:
        MYSQL_ROOT_PASSWORD: root
    volumes:
      # mounting MySQL init scripts
      - ./integrator-analytics/mysql/scripts:/docker-entrypoint-initdb.d
      # mounting MySQL DB data
      - ./integrator-analytics/mysql/data:/var/lib/mysql
    healthcheck:
      test: ["CMD", "mysqladmin" ,"ping", "-uroot", "-proot"]
      interval: 5s
      timeout: 3s
      retries: 10
      start_period: 10s
  wso2ei-analytics:
    image: docker.wso2.com/wso2ei-analytics:6.2.0
    container_name: wso2ei-analytics
    hostname: wso2ei-analytics
    ports:
      - 9444:9444
      - 9612:9612
      - 9712:9712
      - 7612:7612
      - 7712:7712
    healthcheck:
      test: ["CMD-SHELL", "curl -k -f https://localhost:9444/carbon/admin/login.jsp"]
      interval: 5s
      timeout: 3s
      retries: 10
      start_period: 30s
    volumes:
      # mounting configurations
      - ./integrator-analytics/analytics:/home/wso2carbon/volumes/wso2/analytics
    depends_on:
      wso2ei-mysql:
        condition: service_healthy
    links:
      - wso2ei-mysql
  wso2ei-integrator:
    image: docker.wso2.com/wso2ei-integrator:6.2.0
    container_name: wso2ei-integrator
    hostname: wso2ei-integrator
    ports:
      - 9443:9443
      - 8243:8243
      - 8280:8280
    healthcheck:
      test: ["CMD-SHELL", "curl -k -f https://localhost:9443/carbon/admin/login.jsp"]
      interval: 5s
      timeout: 3s
      retries: 10
      start_period: 60s
    volumes:
      # mounting configurations
      - ./integrator-analytics/integrator:/home/wso2carbon/volumes/
    depends_on:
      wso2ei-mysql:
        condition: service_healthy
      wso2ei-analytics:
        condition: service_healthy
    links:
      - wso2ei-mysql
      - wso2ei-analytics

networks:
  elk:
    driver: bridge

volumes:
  elasticsearch:
